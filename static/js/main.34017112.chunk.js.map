{"version":3,"sources":["components/TrelloCard.js","actions/listsActions.js","actions/cardsActions.js","actions/index.js","components/TrelloActionButton.js","components/TrelloList.js","components/App.js","reducers/listsReducer.js","reducers/index.js","store.js","index.js"],"names":["CardContainer","styled","div","TrelloCard","text","id","index","draggableId","String","provided","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","DRAG_HAPPENED","addCard","listID","ADD_CARD","TrelloActionButton","state","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","list","buttonText","buttonTextOpacity","buttonTextColor","buttonTextBackground","onClick","style","styles","openFormButtonGroup","opacity","color","backgroundColor","Icon","renderForm","placeholder","buttonTitle","overflow","minHeight","minWidth","padding","autoFocus","onBlur","onChange","resize","width","outline","border","formButtonGroup","Button","onMouseDown","variant","marginLeft","cursor","this","React","Component","display","alignItems","borderRadius","height","paddingLeft","marginTop","connect","ListContainer","TrelloList","cards","droppableId","drappableProps","map","card","LisContainer","App","onDragEnd","result","destination","source","lists","direction","droppableProps","cardID","initialState","combineReducers","action","newList","newCard","newState","splice","find","listStart","listEnd","store","createStore","rootReducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.34017112.chunk.js","sourcesContent":["import React from 'react';\nimport Card from '@material-ui/core/Card';\nimport Typography from '@material-ui/core/Typography';\nimport CardContent from '@material-ui/core/CardContent';\nimport { Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst CardContainer = styled.div`\n  margin-bottom: 13px;\n  width: 99%;\n`;\n\nconst TrelloCard = ({ text, id, index }) => {\n  return (\n    <Draggable draggableId={String(id)} index={index}>\n      {(provided) => (\n        <CardContainer\n          ref={provided.innerRef}\n          {...provided.draggableProps}\n          {...provided.dragHandleProps}\n        >\n          <Card>\n            <CardContent>\n              <Typography gutterBottom>{text}</Typography>\n            </CardContent>\n          </Card>\n        </CardContainer>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TrelloCard;\n","import { CONSTANTS } from './index';\n\nexport const addList = (title) => {\n  return {\n    type: CONSTANTS.ADD_LIST,\n    payload: title,\n  };\n};\n\nexport const sort = (\n  droppableIdStart,\n  droppableIdEnd,\n  droppableIndexStart,\n  droppableIndexEnd,\n  draggableId,\n  type\n) => {\n  return {\n    type: CONSTANTS.DRAG_HAPPENED,\n    payload: {\n      droppableIdStart,\n      droppableIdEnd,\n      droppableIndexStart,\n      droppableIndexEnd,\n      draggableId,\n      type,\n    },\n  };\n};\n","import { CONSTANTS } from './index';\n\nexport const addCard = (listID, text) => {\n  return {\n    type: CONSTANTS.ADD_CARD,\n    payload: { listID, text },\n  };\n};\n","export * from './listsActions';\nexport * from './cardsActions';\n\nexport const CONSTANTS = {\n  ADD_CARD: 'ADD_CARD',\n  ADD_LIST: 'ADD_LIST',\n  DRAG_HAPPENED: 'DRAG_HAPPENED',\n};\n","import React from 'react';\nimport Icon from '@material-ui/core/Icon';\nimport Card from '@material-ui/core/Card';\nimport Textarea from 'react-textarea-autosize';\nimport Button from '@material-ui/core/Button';\nimport { connect } from 'react-redux';\nimport { addList, addCard } from '../actions';\n\nclass TrelloActionButton extends React.Component {\n  state = {\n    formOpen: false,\n    text: '',\n  };\n\n  openForm = () => {\n    this.setState({\n      formOpen: true,\n    });\n  };\n  closeForm = (e) => {\n    this.setState({\n      formOpen: false,\n    });\n  };\n\n  handleInputChange = (e) => {\n    this.setState({\n      text: e.target.value,\n    });\n  };\n\n  handleAddList = () => {\n    const { dispatch } = this.props;\n    const { text } = this.state;\n\n    if (text) {\n      this.setState({\n        text: '',\n      });\n      dispatch(addList(text));\n    }\n    return;\n  };\n\n  handleAddCard = () => {\n    const { dispatch, listID } = this.props;\n    const { text } = this.state;\n\n    if (text) {\n      this.setState({\n        text: '',\n      });\n      dispatch(addCard(listID, text));\n    }\n  };\n\n  renderAddButton = () => {\n    const { list } = this.props;\n    const buttonText = list ? 'Add another list' : 'Add anoter card';\n    const buttonTextOpacity = list ? 1 : 0.5;\n    const buttonTextColor = list ? 'white' : 'inherit';\n    const buttonTextBackground = list ? 'rgba(0,0,0,.15)' : 'inherit';\n\n    return (\n      <div\n        onClick={this.openForm}\n        style={{\n          ...styles.openFormButtonGroup,\n          opacity: buttonTextOpacity,\n          color: buttonTextColor,\n          backgroundColor: buttonTextBackground,\n        }}\n      >\n        <Icon>add</Icon>\n        <p>{buttonText}</p>\n      </div>\n    );\n  };\n\n  renderForm = () => {\n    const { list } = this.props;\n    const placeholder = list\n      ? 'Enter list title...'\n      : 'Enter a title for this card...';\n    const buttonTitle = list ? 'Add List' : 'Add Card';\n\n    return (\n      <div>\n        <Card\n          style={{\n            overflow: 'visible',\n            minHeight: 80,\n            minWidth: 272,\n            padding: '6px 8px 2px',\n          }}\n        >\n          <Textarea\n            placeholder={placeholder}\n            autoFocus\n            onBlur={this.closeForm}\n            value={this.state.text}\n            onChange={this.handleInputChange}\n            style={{\n              resize: 'none',\n              width: '100%',\n              overflow: 'hidden',\n              outline: 'none',\n              border: 'none',\n            }}\n          />\n        </Card>\n        <div style={styles.formButtonGroup}>\n          <Button\n            onMouseDown={list ? this.handleAddList : this.handleAddCard}\n            variant=\"contained\"\n            style={{ color: 'white', backgroundColor: '#5aac44' }}\n          >\n            {buttonTitle}\n          </Button>\n          <Icon style={{ marginLeft: 8, cursor: 'pointer' }}>close</Icon>\n        </div>\n      </div>\n    );\n  };\n\n  render() {\n    return this.state.formOpen ? this.renderForm() : this.renderAddButton();\n  }\n}\n\nconst styles = {\n  openFormButtonGroup: {\n    display: 'flex',\n    alignItems: 'center',\n    cursor: 'pointer',\n    borderRadius: 3,\n    height: 36,\n    width: 272,\n    paddingLeft: 10,\n  },\n  formButtonGroup: {\n    marginTop: 8,\n    display: 'flex',\n    alignItems: 'center',\n    border: '1px solid red',\n  },\n};\n\nexport default connect()(TrelloActionButton);\n","import React from 'react';\nimport TrelloCard from './TrelloCard';\nimport TrelloActionButton from './TrelloActionButton';\nimport { Droppable, Draggable } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\n\nconst ListContainer = styled.div`\n  background-color: #dfe3e6;\n  border-radius: 3px;\n  width: 300px;\n  padding: 8px;\n  height: 100%;\n  margin-right: 8px;\n`;\n\nconst TrelloList = ({ title, cards, listID, index }) => {\n  return (\n    <Draggable draggableId={String(listID)} index={index}>\n      {(provided) => (\n        <ListContainer\n          {...provided.draggableProps}\n          ref={provided.innerRef}\n          {...provided.dragHandleProps}\n        >\n          <Droppable droppableId={String(listID)}>\n            {(provided) => (\n              <div {...provided.drappableProps} ref={provided.innerRef}>\n                <h3>{title}</h3>\n                {cards.map((card, index) => (\n                  <TrelloCard\n                    key={card.id}\n                    text={card.text}\n                    id={card.id}\n                    index={index}\n                  />\n                ))}\n                <TrelloActionButton listID={listID} />\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n        </ListContainer>\n      )}\n    </Draggable>\n  );\n};\n\nexport default TrelloList;\n","import React, { Component } from 'react';\nimport TrelloList from './TrelloList';\nimport { connect } from 'react-redux';\nimport TrelloActionButton from './TrelloActionButton';\nimport { DragDropContext, Droppable } from 'react-beautiful-dnd';\nimport { sort } from '../actions';\nimport styled from 'styled-components';\n\nconst LisContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n`;\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    //TODO: reordering logic\n    const { destination, source, draggableId, type } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    this.props.dispatch(\n      sort(\n        source.droppableId,\n        destination.droppableId,\n        source.index,\n        destination.index,\n        draggableId,\n        type\n      )\n    );\n  };\n  render() {\n    const { lists } = this.props;\n\n    return (\n      <>\n        <DragDropContext onDragEnd={this.onDragEnd}>\n          <Droppable droppableId=\"all-list\" direction=\"horizontal\" type=\"list\">\n            {(provided) => (\n              <LisContainer\n                {...provided.droppableProps}\n                ref={provided.innerRef}\n              >\n                {lists.map((list, index) => (\n                  <TrelloList\n                    listID={list.id}\n                    key={list.id}\n                    title={list.title}\n                    cards={list.cards}\n                    index={index}\n                  />\n                ))}\n                <TrelloActionButton list />\n              </LisContainer>\n            )}\n          </Droppable>\n        </DragDropContext>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  lists: state.lists,\n});\n\nexport default connect(mapStateToProps)(App);\n","import { CONSTANTS } from '../actions';\n\nlet listID = 2;\nlet cardID = 3;\n\nconst initialState = [\n  {\n    title: 'To Do',\n    id: `list-${1}`,\n    cards: [\n      {\n        id: `card-${0}`,\n        text: '3번 카드',\n      },\n      {\n        id: `card-${1}`,\n        text: '4번 카드',\n      },\n      {\n        id: `list-${2}`,\n        text: '5번 카드',\n      },\n    ],\n  },\n];\n\nexport const listsReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CONSTANTS.ADD_LIST:\n      const newList = {\n        title: action.payload,\n        cards: [],\n        id: `list-${listID}`,\n      };\n      listID += 1;\n      return [...state, newList];\n\n    case CONSTANTS.ADD_CARD: {\n      const newCard = {\n        text: action.payload.text,\n        id: `card-${cardID}`,\n      };\n      cardID += 1;\n\n      const newState = state.map((list) => {\n        if (list.id === action.payload.listID) {\n          return {\n            ...list,\n            cards: [...list.cards, newCard],\n          };\n        } else {\n          return list;\n        }\n      });\n\n      return newState;\n    }\n\n    case CONSTANTS.DRAG_HAPPENED:\n      const {\n        droppableIdStart,\n        droppableIdEnd,\n        droppableIndexStart,\n        droppableIndexEnd,\n        draggableId,\n        type,\n      } = action.payload;\n      const newState = [...state];\n\n      //dragging lists around\n      if (type === 'list') {\n        const list = newState.splice(droppableIndexStart, 1);\n        newState.splice(droppableIndexEnd, 0, ...list);\n        return newState;\n      }\n\n      //in the same list\n      if (droppableIdStart === droppableIdEnd) {\n        const list = state.find((list) => droppableIdStart === list.id);\n        const card = list.cards.splice(droppableIndexStart, 1);\n        list.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      //other list\n      if (droppableIdStart !== droppableIdEnd) {\n        //find the list where drag happend\n        const listStart = state.find((list) => droppableIdStart === list.id);\n\n        //pull out the card from this list\n        const card = listStart.cards.splice(droppableIndexStart, 1);\n\n        //find the list where drag ended\n        const listEnd = state.find((list) => droppableIdEnd === list.id);\n\n        //put the card in the new list\n        listEnd.cards.splice(droppableIndexEnd, 0, ...card);\n      }\n\n      return newState;\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux'\nimport { listsReducer } from './listsReducer'\n\nexport default combineReducers({\n    lists: listsReducer\n});","import { createStore } from 'redux';\nimport rootReducer from './reducers';\n\n\nexport const store = createStore(rootReducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}